{"version":3,"file":"checked-box-list.js.map","sources":["ng://checked-box-list/lib/checked-box-list.service.ts","ng://checked-box-list/lib/checked-box-list.component.ts","ng://checked-box-list/lib/checked-box-list.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CheckedBoxListService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, forwardRef } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, FormControl, ValidatorFn } from '@angular/forms';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { of } from 'rxjs';\n\n@Component({\n  selector: 'ng6-checked-box-list',\n  templateUrl: \"template.html\" ,\n  styleUrls: ['./style.css'],\n  providers: [\n    { \n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CheckedBoxListComponent ),\n      multi: true\n    }\n  ]\n})\nexport class CheckedBoxListComponent implements ControlValueAccessor{\n  @Input('values') orders:any;\n  @Input() returnKey:string;\n  @Input() maxHeightPx:string;\n  selectedOrderIds:any;\n\n  propagateChange = (_: any) => {\n  };\n\n  registerOnChange(fn) {\n    this.propagateChange = fn;\n  }\n  writeValue(value: any) {\n    if (value !== undefined && value !== null) {\n      this.orders = value;\n    }\n  }\n  registerOnTouched() {}\n\n  constructor() {\n    //of(this.getOrders()).subscribe(orders => {\n      //console.log(\"Inside\",orders);\n      //this.orders = this.getOrders();\n   // });\n  }\n\n  getOrders() {\n    return [\n      { id: 100, name: 'order 1' },\n      { id: 200, name: 'order 2' },\n      { id: 300, name: 'order 3' },\n      { id: 400, name: 'order 4' }\n    ];\n  }\n\n  submit(i,event) {\n    /*selectedOrderIds = this.form.value.orders\n      .map((v, i) => v ? this.orders[i].id : null)\n      .filter(v => v !== null);*/\n    console.log(\"Submit\",i,event, event.srcElement.checked);\n    this.orders[i].checked = event.srcElement.checked;\n    this.selectedOrderIds =  this.orders.map((v, i) => v.checked ? (this.returnKey?this.orders[i][this.returnKey]:this.orders[i]) : null)\n    .filter(v => v !== null);\n    console.log(this.selectedOrderIds);\n    this.propagateChange(this.selectedOrderIds);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CheckedBoxListComponent } from './checked-box-list.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [CheckedBoxListComponent],\n  exports: [CheckedBoxListComponent]\n})\nexport class CheckedBoxListModule { }\n"],"names":[],"mappings":";;;;;;;;AAAA;IAOE,iBAAiB;;;YALlB,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;ACJD;IAoCE;QAbA,oBAAe;;;;QAAG,CAAC,CAAM;SACxB,EAAC;;;;;KAiBD;;;;;IAfD,gBAAgB,CAAC,EAAE;QACjB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;KAC3B;;;;;IACD,UAAU,CAAC,KAAU;QACnB,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACzC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACrB;KACF;;;;IACD,iBAAiB,MAAK;;;;IAStB,SAAS;QACP,OAAO;YACL,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE;YAC5B,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE;YAC5B,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE;YAC5B,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE;SAC7B,CAAC;KACH;;;;;;IAED,MAAM,CAAC,CAAC,EAAC,KAAK;;;;QAIZ,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAC,CAAC,EAAC,KAAK,EAAE,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACxD,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC;QAClD,IAAI,CAAC,gBAAgB,GAAI,IAAI,CAAC,MAAM,CAAC,GAAG;;;;;QAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,SAAS,GAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,EAAC;aACpI,MAAM;;;;QAAC,CAAC,IAAI,CAAC,KAAK,IAAI,EAAC,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACnC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KAC7C;;;YAzDF,SAAS,SAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,sUAA4B;gBAE5B,SAAS,EAAE;oBACT;wBACE,OAAO,EAAE,iBAAiB;wBAC1B,WAAW,EAAE,UAAU;;;wBAAC,MAAM,uBAAuB,EAAE;wBACvD,KAAK,EAAE,IAAI;qBACZ;iBACF;;aACF;;;;qBAEE,KAAK,SAAC,QAAQ;wBACd,KAAK;0BACL,KAAK;;;;;;;ACpBR;;;YAIC,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;iBACb;gBACD,YAAY,EAAE,CAAC,uBAAuB,CAAC;gBACvC,OAAO,EAAE,CAAC,uBAAuB,CAAC;aACnC;;;;;;;;;;;;;;;"}
